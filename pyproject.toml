[project]
name = "ubiops-file-sync"
version = "0.1.3"
description = "A Python library for synchronizing files between a local directory and a UbiOps bucket. This library provides utilities for downloading files from UbiOps buckets, uploading files to buckets, and automatically watching local directories for changes to keep them in sync with remote storage."
license = "GPL-3.0-only"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "backoff>=2.2.1",
    "httpx>=0.28.1",
    "pydantic>=2.11.7",
    "ubiops==4.11.0",
    "watchdog>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "detect-secrets>=1.5.0",
    "ipykernel>=7.1.0",
    "pre-commit>=4.3.0",
    "pydantic>=2.11.7",
    "ruff>=0.14.1",
    "ubiops-cli==2.28.0",
]

# [[tool.uv.index]]
# name = "testpypi"
# url = "https://test.pypi.org/simple/"
# publish-url = "https://test.pypi.org/legacy/"
# explicit = true

[tool.ruff]
line-length = 88
extend-include = ["*.ipynb"]
extend-exclude = ["data", "report"]
builtins = []

[tool.ruff.lint]
pydocstyle.convention = "numpy"
external = ["DOC"]
select = ["ALL"]
ignore = [
    "D203",   # "One blank line required before class docstring." Should be disabled by default.
    "D213",   # "Multi-line docstring summary should start at the second line." Should be disabled by default.
    "E501",   # "Line too long." Sometimes my comments are a bit longer.
    "E731",   # "Do not assign a lambda expression, use a def." Needed for spark UDFs.
    "ERA001", # "Found commented out code."
    "FBT001", # "Boolean positional arg in function definition.
    "FBT002", # "Boolean default value in function definition."
    "FBT003", # "Boolean positional value in function call." This is common in spark.
    "ISC001", # "Implicit string concatenation." Ignored since it conflicts with the formatter.
    "N812",   # "Lowercase `functions` imported as non-lowercase." Pretty standard for spark programming.
    "T201",   # "`print` found."
    # Nitpicky exceptions - comment out when productionalizing your code
    "BLE001",  # Do not catch blind exception: `Exception`
    "D400",    # First line should end with a period
    "D401",    # First line of docstring should be in imperative mood
    "PD901",   # Avoid using the generic variable name `df` for DataFrames
    "PLR2004", # "Magic value used in comparison, consider replacing with a constant variable."
    "TRY003",  #  Avoid specifying long messages outside the exception class
]
unfixable = [
    "F401", # "Unused import." Disabled since it makes linting/formatting notebooks messy and impossible.
]

[tool.ruff.lint.per-file-ignores]
"notebooks/**/*.py" = [
    "D100",   # "Missing docstring in public module." Not needed for Databricks notebooks.
    "INP001", # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
]
"tests/*.py" = [
    "PLR2004", # "Magic value used in comparison, consider replacing with a constant variable."
    "S101",    # "Use of `assert` detected."
]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = false

[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ubiops_file_sync"]
